/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/Y9JygGNgbjn
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

 import { Prata } from 'next/font/google'

 prata({
  subsets: ['latin'],
  display: 'swap',
})

 To read more about using these font, please visit the Next.js documentation:
 - App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
 - Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
 **/

import {useContext, useEffect, useState} from "react"
import {Input} from "@/components/ui/input"
import {Button} from "@/components/ui/button"
import {Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle} from "@/components/ui/card"
import {UserSelectionsContext} from "@/contexts/UserSelectionsContext";
import {RoleContext} from "@/contexts/RoleContext";

export default function Bd() {
    const [activeTab, setActiveTab] = useState("active")
    const contextValue = useContext(UserSelectionsContext);
    const {updateRole} = useContext(RoleContext);
    const [list, setList] = useState(()=>{
        if (typeof window !== 'undefined') {
            return JSON.parse(localStorage.getItem('localList') || '[]');
        } else {
            // 如果不在浏览器环境中，可以使用其他存储方式，例如 Node.js 中的文件系统
            console.warn('localStorage is not available in this environment.');
            return [];
        }
    });

    useEffect(() => {
        let timerId;

        const fetchLocalList = () => {
            const localList = localStorage.getItem('localList');
            setList(localList ? JSON.parse(localList) : []);
        };

        // 初始化时立即读取一次
        fetchLocalList();

        // 设置定时器，每5秒读取一次
        timerId = setInterval(fetchLocalList, 1000);

        // 清理函数，当组件卸载时清除定时器
        return () => clearInterval(timerId);
    }, []);

    useEffect(()=>{
        localStorage.setItem('localList', JSON.stringify(list));
    }, [list])


    const handleCardClick = async (card: any) => {
        localStorage.setItem('userSelections', JSON.stringify(card.selections));
        window.location.reload();
    };

    const [searchTerm, setSearchTerm] = useState("");
    const [checkedCard, setCheckedCard] = useState({id: 0})
    const [cardDisplay, setCardDisplay] = useState(true)

    const filteredCards = list.filter((card: any) =>
        card.name.toLowerCase().includes(searchTerm.toLowerCase()) || card.description.toLowerCase().includes(searchTerm.toLowerCase())
    );

    return (
        <div>
            <div className="z-10 bg-background p-4 mb-6 rounded-lg shadow-lg">
                <div className="flex items-center gap-4">
                    <Input
                        type="search"
                        placeholder="输入名称查找本地记录"
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="flex-1"
                    />
                    <Button variant="outline">查找</Button>
                    <Button variant="outline" onClick={() => setList(list.filter((item: any) => item.id !== checkedCard.id))}>删除</Button>
                    <Button variant="outline" onClick={() => setList([])}>清除全部</Button>
                    {/*<Button variant="outline" onClick={() => setCardDisplay(!cardDisplay)}>切换显示</Button>*/}
                </div>
            </div>
            <div
                className="flex grid grid-cols-2 sm:grid-cols-1 md:grid-cols-1 lg:grid-cols-1 xl:grid-cols-1 gap-6 p-4">
                {filteredCards.sort((a: any, b: any) => b.totalScore - a.totalScore).map((card: any) => (
                    cardDisplay?<Card
                        key={card.id}
                        className={`relative overflow-hidden rounded-lg shadow-lg ${
                            checkedCard.id === card.id
                                ? "border-2 golden-glow ring-4 ring-primary-foreground"
                                : "border-2 border-gold"
                        }`}
                        onClick={() => setCheckedCard(card)}
                        onDoubleClick={() => handleCardClick(card)}
                    >
                            <CardContent className="p-4 bg-background">
                            <h3 className="text-xl font-bold">{card.name}-{card.totalScore}</h3>
                        </CardContent>
                    </Card>:
                        <div key={card.id}>
                            <Card className={`relative overflow-hidden rounded-lg shadow-lg ${
                                    checkedCard.id === card.id
                                        ? "border-2 golden-glow ring-4 ring-primary-foreground"
                                        : "border-2 border-gold"
                                }`}
                                onClick={() => setCheckedCard(card)}
                                onDoubleClick={() => handleCardClick(card)}>
                                <CardHeader>{card.name}-{card.id}</CardHeader>
                            </Card>
                        </div>
                ))}
            </div>
        </div>
    )
}
