/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/Y9JygGNgbjn
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Prata } from 'next/font/google'

prata({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/

import {useContext, useEffect, useState} from "react"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import {UserSelectionContext} from "@/contexts/UserSelectionContext";
import {fetchJbCards, fetchTzCards, fetchZkCards} from "@/services/api";
import {RoleContext} from "@/contexts/RoleContext";
export default function Jb() {
  const [isChecked, setIsChecked] = useState({})
  const [list, setList] = useState([]);

  const { userSelections, selectItem, deleteItem } = useContext(UserSelectionContext);
  const { updateRole } = useContext(RoleContext);

  useEffect(() => {
    let isMounted = true;
    // 只在组件挂载时运行一次
    (async () => {
      const list = await fetchJbCards();
      if (isMounted) {
        setList(list);
      }
    })();

    // 清理函数，确保在组件卸载前取消异步操作
    return () => {
      isMounted = false;
    };
  }, []); // 无依赖数组意味着此 effect 只在挂载时运行一次

  useEffect(() => {
    setLock(true);
    // 恢复状态
    if (userSelections.jbSelection.length > 0) {
      userSelections.jbSelection.map(card => {
        if (userSelections.jbSelection.some(item => item.id === card.id)) {
          setIsChecked((prevState) => ({
            ...prevState,
            [card.id]: true,
          }))
        }
      })
    }
    setLock(false);
  }, [userSelections.jbSelection])

  const [lock, setLock] = useState(false);
  const handleCardClick = async (category, card) => {
    const id = card.id;
    if (lock) return;

    setLock(true);

    try {
      if (!userSelections.jbSelection.some(item => item.id === card.id)) {
        if (userSelections.jbSelection.reduce(
            (acc, obj) => acc + (obj.num || 0),
            0
        ) + card.num <= 12) {
          setIsChecked((prevState) => ({
            ...prevState,
            [id]: true,
          }));
          await selectItem(category, card);
          await updateRole(card.forth, '羁绊', 'add');
        } else {
          return;
        }
      } else {
        setIsChecked((prevState) => ({
          ...prevState,
          [id]: false,
        }));
        await deleteItem(category, card.id);
        await updateRole(card.forth, '羁绊', 'remove');
      }
    } finally {
      setLock(false);
    }
  };
  const [searchTerm, setSearchTerm] = useState("")
  const filteredJbCards = list.filter(card =>
      card.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div>
      <div className="bg-background p-4 mb-6 rounded-lg shadow-lg">
        <div className="flex items-center gap-4">
          <Input
            type="search"
            placeholder="输入名称查找"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="flex-1"
          />
          <Button variant="outline">Filter</Button>
        </div>
      </div>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6 p-4">
        {filteredJbCards.map((card) => (
          <Card
            key={card.id}
            className={`relative overflow-hidden rounded-lg shadow-lg ${
              isChecked[card.id]
                ? "border-2 border-primary ring-4 ring-primary-foreground"
                : userSelections.jbSelection.some((item) => item.id === card.id)
                ? "border-2 border-gold"
                : ""
            }`}
            onClick={() => handleCardClick('jbSelection', card)}
          >
            <div className="relative">
              <img
                src={card.pic}
                alt={card.name}
                width={600}
                height={400}
                className="object-cover w-full h-48"
              />
            </div>
            <CardContent className="p-4 bg-background">
              <h3 className="text-xl font-bold">{card.name}</h3>
              <div className="mt-2">
                {card.description}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  )
}
