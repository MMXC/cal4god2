'use client';
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/rvsIFHX5SzU
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
import {Button} from "@/components/ui/button"
import {Avatar, AvatarFallback, AvatarImage} from "@/components/ui/avatar"
import {Progress} from "@/components/ui/progress"
import {Input} from "@/components/ui/input"
import {SelfProvider} from "@/providers/SelfProvider";
import {UserSelectionProvider} from "@/providers/UserSelectionProvider";
import React, {useEffect, useRef, useState} from "react";
import {useRole} from "@/contexts/RoleContext";

export default function Self() {
    const {lists} = useRole();
    const [selectedCard, setSelectedCard] = useState({
        jj: 10,
        level: 300,
        id: undefined,
        star: 12,
        quality: '至臻',
        pre: '',
        kind: '进攻',
        type: '神话',
        fnbfb: 0,
        name: ''
    });
    const getJxCard = (type: any, kind: any) => {
        return {
            jj: 10,
            level: 300,
            id: undefined,
            type: type,
            star: (type==='神话'||type==='原初')?16:12,
            kind: kind,
            quality: '至臻',
            fnbfb: 0.5
        }
    };

    const [selectType, setSelectType] = useState('全部');
    const [changeFnFlag, setChangeFnFlag] = useState(false);
    const [selfList, setSelfList] = useState(() => {
        if (typeof window !== 'undefined') {
            let list = JSON.parse(localStorage.getItem('selflist') || '{}');
            if(!list.zkList||list.zkList.length===0){
                list.zkList = lists.zkList;
            }
            return list;
        } else {
            // 如果不在浏览器环境中，可以使用其他存储方式，例如 Node.js 中的文件系统
            console.warn('localStorage is not available in this environment.');
            return {};
        }
    });
    const [progressLevelValue, setProgressLevelValue] = useState(300);
    const [progressJjValue, setProgressJjValue] = useState(10);

    function calculateStarBonus(card: any): number {
        if (card.type === '神话') {
            let tz:number = 0;
            if(card.kind==='灵能') tz=-4;
            switch (card.star) {
                case 2: return 24+tz;
                case 3: return 39+tz;
                case 4: return 41+tz;
                case 5: return 45+tz;
                case 6: return 56+tz;
                case 7: return 69+tz;
                case 8: return 84+tz;
                case 9: return 95+tz;
                case 10: return 108+tz;
                case 11: return 128+tz;
                case 12: return 149+tz;
                case 13: return 194+tz;
                case 14: return 239+tz;
                case 15: return 284+tz;
                case 16: return 329+tz;
                default: return 24+tz;
            }
        } else if (card.type === '原初') {
            // 进攻卡 15 生存 12 灵能 守护 13
            let tz = 0;
            if(card.kind==='生存') tz=-3;
            if(card.kind==='灵能') tz=-2;
            if(card.kind==='守护') tz=-2;
            switch (card.star) {
                case 2: return 15+tz;
                case 3: return 25+tz;
                case 4: return 30+tz;
                case 5: return 34+tz;
                case 6: return 56+tz;
                case 7: return 69+tz;
                case 8: return 84+tz;
                case 9: return 95+tz;
                case 10: return 108+tz;
                case 11: return 128+tz;
                case 12: return 149+tz;
                case 13: return 194+tz;
                case 14: return 239+tz;
                case 15: return 284+tz;
                case 16: return 329+tz;
                default: return 12+tz;
            }
        } else if (card.type === '传说') {
            // 进攻 12 灵能守护 11  生存 9
            let tz = 0;
            if(card.kind==='生存') tz=-3;
            if(card.kind==='灵能') tz=-1;
            if(card.kind==='守护') tz=-1;
            switch (card.jj) {
                case 2: return 12+tz;
                case 3: return 17+tz;
                case 4: return 36+tz;
                case 5: return 45+tz;
                case 6: return 56+tz;
                case 7: return 69+tz;
                case 8: return 84+tz;
                case 9: return 95+tz;
                case 10: return 108+tz;
                case 11: return 128+tz;
                case 12: return 149+tz;
                default: return 12+tz;
            }
        } else if (card.type === '史诗') {
            // 进攻 7 灵能 6 守护 5  生存 5
            let tz = 0;
            if(card.kind==='生存') tz=-2;
            if(card.kind==='灵能') tz=-1;
            if(card.kind==='守护') tz=-2;
            switch (card.jj) {
                case 2: return 7+tz;
                case 3: return 15+tz;
                case 4: return 17+tz;
                case 5: return 19+tz;
                case 6: return 21+tz;
                case 7: return 23+tz;
                case 8: return 27+tz;
                case 9: return 47+tz;
                case 10: return 67+tz;
                case 11: return 87+tz;
                case 12: return 107+tz;
                default: return 7+tz;
            }
        } else {
            return 1;
        }
    }

    function calculateBaseAttack(card: any) {
        return (
            ((card.level ?? 1) - 1) *
            (card.type === '神话' ? 5 :
                card.type === '原初' ? 4 :
                    card.type === '史诗' ? 3 :
                        card.type === '稀有' ? 2 :
                            card.type === '普通' ? 1 : 0) +
            calculateStarBonus(card)
        );
    }
    function calculateQualityBonus(card: any): number {
        return card.quality === '至臻' ? 1.3 : 1;
    }
    function calculateJjBonus(card: any): number {
        if (card.type === '神话') {
            switch (card.jj) {
                case 0: return 1;
                case 1: return 1.05;
                case 2: return 1.10;
                case 3: return 1.15;
                case 4: return 1.20;
                case 5: return 1.25;
                case 6: return 1.30;
                case 7: return 1.35;
                case 8: return 1.40;
                case 9: return 1.45;
                case 10: return 1.50;
                default: return 1;
            }
        } else if (card.type === '原初') {
            switch (card.jj) {
                case 0: return 1;
                case 1: return 1.05;
                case 2: return 1.05;
                case 3: return 1.10;
                case 4: return 1.10;
                case 5: return 1.15;
                case 6: return 1.15;
                case 7: return 1.20;
                case 8: return 1.20;
                case 9: return 1.25;
                case 10: return 1.25;
                default: return 1;
            }
        } else if (card.type === '传说') {
            switch (card.jj) {
                case 0: return 1;
                case 1: return 1.02;
                case 2: return 1.04;
                case 3: return 1.06;
                case 4: return 1.08;
                case 5: return 1.10;
                case 6: return 1.12;
                case 7: return 1.14;
                case 8: return 1.16;
                case 9: return 1.18;
                case 10: return 1.20;
                default: return 1;
            }
        } else if (card.type === '史诗') {
            switch (card.jj) {
                case 0: return 1;
                case 1: return 1.03;
                case 2: return 1.03;
                case 3: return 1.06;
                case 4: return 1.06;
                case 5: return 1.09;
                case 6: return 1.09;
                case 7: return 1.12;
                case 8: return 1.12;
                case 9: return 1.15;
                case 10: return 1.25;
                default: return 1;
            }
        } else {
            return 1;
        }
    }

    useEffect(() => {
        if (typeof window !== 'undefined') {
            localStorage.setItem('selflist', JSON.stringify(selfList));
        } else {
            // 如果不在浏览器环境中，可以使用其他存储方式，例如 Node.js 中的文件系统
            console.warn('localStorage is not available in this environment.');
        }
    }, [selfList])

    useEffect(() => {
        if (!selectedCard) return; // 如果没有选中的卡片，退出
        setProgressLevelValue(selectedCard.level??300);
        setProgressJjValue(selectedCard.jj??10);
        setSelfList((prevList: any) => {
            // 使用map遍历zkList，找到id匹配的卡片并用selectedCard替换
            const updatedList = prevList.zkList.map((card: any) =>
                card.id === selectedCard.id ? { ...selectedCard } : card
            );

            return { ...prevList, zkList: updatedList };
        });
    }, [selectedCard]); // 注意这里只依赖于selectedCard的变化

    const handleCardClick = (card: any) => {
        console.log(card);
        if(!card.star){
            card.star = 12;
        }
        setSelectedCard(card);
    }

    const progressLevelRef = useRef<HTMLDivElement>(null); // 创建一个 ref
    const progressJjRef = useRef<HTMLDivElement>(null); // 创建一个 ref

    const handleGetRect = (myRef: any) => {
        if (myRef.current) {
            return myRef.current.getBoundingClientRect();
        }
        return null;
    };

    const handleProgressLevelClick = (event: React.MouseEvent<HTMLDivElement>) => {
        const rect = handleGetRect(progressLevelRef);
        if(rect===null) return;
        const mouseX = event.clientX - rect?.left;
        const percentage:number = Math.min(100, Math.max(0, (mouseX / rect?.width) * 100));
        setSelectedCard((prevState: any) => ({
                ...prevState,
                level: Math.max(1, (percentage * 300/100)).toFixed(0)
            }
        ))
    };
    const handleProgressJjClick = (event: React.MouseEvent<HTMLDivElement>) => {
        const rect = handleGetRect(progressJjRef);
        if(rect===null) return;
        const mouseX = event.clientX - rect?.left;
        const percentage:number = Math.min(100, Math.max(0, (mouseX / rect?.width) * 100));

        setSelectedCard((prevState: any) => ({
                ...prevState,
                jj: Math.max(0, (percentage * 10/100)).toFixed(0)
            }
        ))
    };
    // 假设你有以下图片资源
    const StarImage = '/assets/icon/star.png'; // 星星图片
    const SunImage = 'assets/icon/sun.png';   // 太阳图片

    function renderStars(stars: any) {
        stars = Math.max(stars, 2); // 确保星星数量至少为2
        stars = Math.min(stars, 16); // 确保星星数量最多为16

        let suns = Math.floor(stars / 4); // 计算太阳的数量
        let starsRemaining = stars % 4; // 计算剩余的星星数量

        let elements = [];
        for (let i = 0; i < suns; i++) {
            elements.push(<img key={`sun-${i}`} style={{ width: '20px', height: '20px', display: 'inline-block' }} src={SunImage} alt="sun" />);
        }
        for (let i = 0; i < starsRemaining; i++) {
            elements.push(<img key={`star-${i}`} style={{ width: '20px', height: '20px', display: 'inline-block' }} src={StarImage} alt="star" />);
        }

        return elements;
    }
    const filteredZkCards = selfList.zkList.filter((zk: any)=>selectType==='全部'||zk.kind===selectType);

    const handleStarChange = (delta: any) => {
        console.log(delta);
        setSelectedCard((prevState: any) => ({
            ...prevState,
            star: Math.min(Math.max(prevState.star + delta, 2), 16)
        }));
    };

    const toggleQuality = () => {
        setSelectedCard((prevState: any) => ({
            ...prevState,
            quality: prevState.quality==='至臻'?'普通':'至臻'
        }));
    };

    function calAttack(card: any) {
        return (
            calculateBaseAttack(card) *
            calculateQualityBonus(card) *
            ((card.fnbfb ?? 0) +
                calculateJjBonus(card))
        );
    }

    return (
        <SelfProvider><UserSelectionProvider>
            <div className="z-10 flex gap-6 w-full max-w-5xl mx-auto px-4 py-8">
                <div className="w-1/3 h-full border-r overflow-y-scroll">
                    <div className="flex justify-around p-4 border-b">
                        <Button variant="ghost" onClick={() => setSelectType('全部')}>全部</Button>
                        <Button variant="ghost" onClick={() => setSelectType('进攻')}>进攻</Button>
                        <Button variant="ghost" onClick={() => setSelectType('守护')}>守护</Button>
                        <Button variant="ghost" onClick={() => setSelectType('生存')}>生存</Button>
                        <Button variant="ghost" onClick={() => setSelectType('灵能')}>灵能</Button>
                    </div>
                    <div className="grid grid-cols-4 gap-2 p-4">
                        {Array.from({length: 48}).map((_, i) =>
                            <div key={i}>
                                {filteredZkCards[i] ? (
                                    <div
                                        className={`relative ${(selectedCard.id) && (filteredZkCards[i]) && (filteredZkCards[i].id === selectedCard.id) ?
                                            "border-2 golden-glow ring-4 ring-primary-foreground"
                                            : "border-2 border-gold"}}`}
                                        onClick={() => handleCardClick(filteredZkCards[i])}>
                                        <img
                                            src={filteredZkCards[i].pre}
                                            width={40}
                                            height={40}
                                            alt={filteredZkCards[i].name}
                                            title={filteredZkCards[i].name}
                                            className={`w-full h-full object-contain`}
                                        />
                                        <div className="absolute top-0 left-0 p-1 text-xs text-white bg-red-600">E</div>
                                        <div className="absolute top-0 right-0 p-1 text-xs text-white bg-gray-800">
                                            {filteredZkCards[i].level ?? 1}
                                        </div>
                                    </div>
                                ) : <img src="/placeholder.svg" alt="Item" className="w-full h-full"/>
                                }
                            </div>
                            )
                        }
                    </div>
                    <div className="flex justify-between p-4 border-t">
                        <span>48/80</span>
                        <div className="flex space-x-2">
                            <Button variant="outline">品质排序</Button>
                        </div>
                    </div>
                </div>
                <div className="w-2/3 h-full p-4">
                    <div className="flex items-center mb-4">
                        <Avatar>
                            <AvatarImage src={selectedCard.pre}/>
                            <AvatarFallback>CN</AvatarFallback>
                        </Avatar>
                        <div className="ml-4">
                            <p>名称：{selectedCard.name}</p>
                            <p>类型：{selectedCard.kind}</p>
                            <p style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between'}}>
                                星级：{renderStars(selectedCard.star ? selectedCard.star : 2)}
                                <Button variant="outline" onClick={() => handleStarChange(1)}>+</Button>
                                <Button variant="outline" onClick={() => handleStarChange(-1)}>-</Button>
                            </p>
                            <p>类别：{selectedCard.type}</p>
                            <p>
                                品质：{selectedCard.quality}
                                <input type="checkbox" checked={selectedCard.quality==='至臻'} onChange={toggleQuality} />
                            </p>
                        </div>
                    </div>
                    <div className="mb-4" ref={progressLevelRef} onClick={handleProgressLevelClick}>
                        <p>等级: {progressLevelValue}/300</p>
                        <Progress value={progressLevelValue/300*100} className="w-full" />
                    </div>
                    <div className="flex items-center mb-4">
                        <Button variant="outline" className="mr-2">
                            羁绊查看
                        </Button>
                    </div>
                    <div className="grid grid-cols-4 gap-4 mb-4">
                        <div>
                            <p>魂力: ???</p>
                        </div>
                        <div>
                            <p>攻击: {
                                calAttack(selectedCard).toFixed(0)
                            }</p>
                        </div>
                        <div>
                            <p>生命: ???</p>
                        </div>
                        <div>
                            <p>防御: ???</p>
                        </div>
                    </div>
                    <div className="flex space-x-2 mb-4">
                        <Button variant="outline">主动技能</Button>
                        <Button variant="outline">被动技能</Button>
                        <Button variant="outline">临时技能</Button>
                    </div>
                    <div className="mb-4" ref={progressJjRef} onClick={handleProgressJjClick}>
                        <p>进阶进度: {progressJjValue}/10</p>
                        <Progress value={progressJjValue/10*100} className="w-full" />
                    </div>
                    <div>
                        <p>赋能加成<Button variant="ghost" onClick={() => setChangeFnFlag(!changeFnFlag)}>{changeFnFlag?'查看':'修改'}</Button></p>
                        {changeFnFlag ?
                            <div className="grid grid-cols-2 gap-4">
                                <Input placeholder="请录入当前等级星级品质对应的赋能数值" type={"number"} onChange={(e) => {
                                    const percent = parseInt(e.target.value) / (
                                        calculateBaseAttack(selectedCard) *
                                        calculateQualityBonus(selectedCard)
                                    );
                                    if (isNaN(percent) || percent > 0.53 || percent < 0) return;
                                    setSelectedCard({
                                        ...selectedCard,
                                        fnbfb: parseInt(e.target.value) / (
                                            calculateBaseAttack(selectedCard) *
                                            calculateQualityBonus(selectedCard)
                                        )
                                    })
                                }}/>
                                <span>{((selectedCard.fnbfb ?? 0) * 100).toFixed(2)}%</span>
                            </div> :
                            <div className="grid grid-cols-2 gap-4"><Input value={calculateBaseAttack(selectedCard) *
                                calculateQualityBonus(selectedCard)*(selectedCard.fnbfb??0)} type={"number"} disabled/><span>{((selectedCard.fnbfb ?? 0) * 100).toFixed(2)}%</span></div>
                        }
                    </div>
                    <div className="mb-4 flex items-center">
                        <p className="text-gray-600">{((calAttack(selectedCard)) / (calAttack(getJxCard(selectedCard.type, selectedCard.kind))))>0.8?'我还能提！':'还不行：'}</p>
                        <span className="ml-2 font-bold text-xl text-blue-500">{((calAttack(getJxCard(selectedCard.type, selectedCard.kind)))-(calAttack(selectedCard))).toFixed(0)}</span>
                    </div>
                </div>
            </div>
        </UserSelectionProvider></SelfProvider>
    )
}
