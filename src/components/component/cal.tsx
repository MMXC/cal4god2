/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/x6swpfz6bjJ
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

 import { Inter } from 'next/font/google'

 inter({
  subsets: ['latin'],
  display: 'swap',
})

 To read more about using these font, please visit the Next.js documentation:
 - App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
 - Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
 **/
import {Button} from "@/components/ui/button"
import {useContext, useEffect, useRef, useState} from 'react';
import {UserSelectionsContext} from '@/contexts/UserSelectionsContext';
import {RoleContext, RoleType} from "@/contexts/RoleContext";
import {PopoverTrigger} from "@radix-ui/react-popover";
import {Popover, PopoverContent} from "@/components/ui/popover";

import html2canvas from 'html2canvas';
import {DownloadIcon} from "@radix-ui/react-icons";
import {Card, CardContent} from "@/components/ui/card";
import {uploadImage} from "@/services/api";
import {ArrowDownIcon, ArrowUpIcon, Icon, LockIcon, SaveIcon, ShareIcon, UnlockIcon} from "lucide-react";
import QRCode from 'qrcode.react';
import Zk from "@/components/component/zk";
import Jb from "@/components/component/jb";
import Tz from "@/components/component/tz";
import Zb from "@/components/component/zb";
import Fn from "@/components/component/fn";
import Yg from "@/components/component/yg";
import Hy from "@/components/component/hy";
import Fwzy from "@/components/component/fwzy";
import Fw from "@/components/component/fw"; // 导入QRCode组件
import Jn from "@/components/component/jn";

function generateFilename(userSelections: any, nameRelections: { zkSelection: string; zbSelection: string; fwSelection: string; fwzySelection: string; jbSelection: string; tzSelection: string }, totalScore: any) {
    let fileName = 'cal';
    // if (userSelections) {
    //     // 假设userSelections是一个对象，我们将其转换为字符串并附加到文件名
    //     fileName += '-' + Object.entries(userSelections)
    //         .map(([key, cards]) => {
    //             if (cards && Array.isArray(cards) && cards.length > 0) {
    //                 return (nameRelections[key as keyof typeof nameRelections] || '') + '-' + cards
    //                     .sort((cardA, cardB) => cardA.id - cardB.id) // Assuming ids are numeric and can be sorted directly
    //                     .map(card => card.name || '')
    //                     .join('|');
    //             }
    //             return '';
    //         }).join('-');
    // }
    fileName += '-' + totalScore.toFixed(0);
    fileName += '.png';
    return fileName;
}


// 假设这是你的UserContext
export default function Cal() {
    const {userSelections, selectItem, deleteItem, deleteOneItem, setUserSelections} = useContext(UserSelectionsContext);
    const {
        roleValues,
        sources,
        toggleLock,
        isLocked,
        scoreChangeRatio,
        calculateJnDamage
    } = useContext(RoleContext);
    const calRef = useRef<HTMLDivElement>(null);
    const nameRelections = {
        "zkSelection": "主卡",
        "zbSelection": "装备",
        "jbSelection": "羁绊",
        "fwSelection": "符文",
        "fwzySelection": "符文之语",
        "tzSelection": "套装",
        "fnSelection": "赋能",
        "ygSelection": "远古词条",
        "hySelection": "黄印词条",
        "jnSelection": "技能"
    };
    const sxRelections = {
        "zkSelection": "sx",
        "zbSelection": "sx",
        "jbSelection": "forth",
        "fwSelection": "sx",
        "fwzySelection": "sx",
        "tzSelection": "sx",
        "fnSelection": "sx",
        "ygSelection": "sx",
        "hySelection": "sx",
        "jnSelection": "sx"
    };
    const {setLists} = useContext(RoleContext);
    const [exporting, setExporting] = useState(false); // loading 状态
    const [selectedProfession, setSelectedProfession] = useState<string>('斩魂');

    useEffect(() => {
        let isMounted = true;
        // 只在组件挂载时运行一次
        isMounted && (async () => {
            const savedSelections: { zkSelection: any[], zbSelection: any[], jbSelection: any[], fwSelection: any[], fwzySelection: any[], tzSelection: any[], hySelection: any[], fnSelection: any[], ygSelection: any[], jnSelection: any[] }
                = JSON.parse(localStorage.getItem('userSelections') ?? '{}');
            if (isMounted && savedSelections) {
                let selections = savedSelections ? savedSelections : {
                    zkSelection: [],
                    zbSelection: [],
                    jbSelection: [],
                    fwSelection: [],
                    fwzySelection: [],
                    tzSelection: [],
                    hySelection: [],
                    fnSelection: [],
                    ygSelection: [],
                    jnSelection: []
                };
                setUserSelections(selections); // 批量设置，避免多次 selectItem
            }
        })();
        toggleLock();
        // 清理函数，确保在组件卸载前取消异步操作
        return () => {
            isMounted = false;
        };
    }, []); // 无依赖数组意味着此 effect 只在挂载时运行一次

    const handleClickPrevCard = (category: keyof typeof sxRelections | keyof typeof nameRelections, card: any) => {
        console.log("category:{}, card", category, card);
        if (category !== 'fwSelection') {
            userSelections[category]
                .filter((item: any) => item.id === card.id)
                .forEach((item: any) => {
                    console.log("item:", item)
                    deleteItem(category, card.id)
                })
        } else {
            if (userSelections[category]
                .filter((item: any) => item.id === card.id)) {
                if (userSelections.fwSelection.reduce((acc: any, cur: any) => acc + (cur.id === card.id ? 1 : 0), 0) === 0) {
                    return
                } else {
                    deleteOneItem(category, card.id);
                }
            }
        }
    }

    const handleExportToImage = () => {
        if (calRef.current) {
            setExporting(true);
            let fileName = generateFilename(userSelections, nameRelections, roleValues.totalScore);
            html2canvas(calRef.current)
                .then(canvas => {
                    const imgDataUrl = canvas.toDataURL('image/png');
                    // 创建一个隐藏的链接元素
                    const link = document.createElement('a');
                    link.href = imgDataUrl;
                    link.download = fileName;
                    link.click();
                })
                .finally(() => {
                    setExporting(false);
                });
        }
    };

    const handleSave = () => {
        console.log("开始保存")
        const fa = {
            id: new Date().getTime(),
            name: 'cal-' + roleValues?.totalScore?.toFixed(0),
            author: "",
            description: "",
            totalScore: roleValues?.totalScore,
            selections: {...userSelections}
        };

        // 检查 window 对象是否存在，确保我们是在浏览器环境中
        if (typeof window !== 'undefined') {
            const localList = JSON.parse(localStorage.getItem('localList') || '[]');
            localList.push(fa);
            localStorage.setItem('localList', JSON.stringify(localList));
        } else {
            // 如果不在浏览器环境中，可以使用其他存储方式，例如 Node.js 中的文件系统
            console.warn('localStorage is not available in this environment.');
        }
    }

    return (
        <div ref={calRef} className="z-10 grid grid-rows-[auto_0.1fr] gap-6 w-full max-w-5xl mx-auto px-4 py-8">
            {exporting && (
                <div style={{position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(255,255,255,0.7)', zIndex: 9999, display: 'flex', alignItems: 'center', justifyContent: 'center'}}>
                    <span style={{fontSize: 24}}>图片导出中，请稍候...</span>
                </div>
            )}
            <div className="grid grid-cols-[1fr_250px] gap-6">
                <div className="grid gap-4">
                    <div className="grid grid-cols-[repeat(1,1fr)] gap-12">
                        <div className="bg-card p-4 rounded-lg shadow-md">
                            <div className="flex items-center justify-between mb-2 font-bold">
                                <span
                                    className="text-sm font-medium">主卡:&nbsp;&nbsp;{userSelections.zkSelection.map((item: any) => item.name).join("-")}</span>
                                <PlusIcon className="w-5 h-5 text-muted-foreground"/>
                            </div>
                            <div className="flex items-center justify-between mb-2 font-bold">
                                <span
                                    className="text-sm font-medium">赋能:&nbsp;&nbsp;{userSelections.fnSelection.map((item: any) => item.name).join("-")}</span>
                                <PlusIcon className="w-5 h-5 text-muted-foreground"/>
                            </div>
                            <div className="grid grid-cols-[repeat(6,0.3fr)] gap-2">
                                {Array.from({length: 12}).map((_, i) => (
                                    <div key={i} className="bg-muted rounded-md p-2 flex items-center justify-center">
                                        {userSelections.zkSelection[i] ? (<img
                                            src={userSelections.zkSelection[i].pre}
                                            width={600}
                                            height={400}
                                            alt={userSelections.zkSelection[i].name}
                                            title={userSelections.zkSelection[i].name}
                                            className="w-full h-full object-contain"
                                            onClick={() => handleClickPrevCard('zkSelection', userSelections.zkSelection[i])} // 添加点击事件处理器
                                        />) : (
                                            <Popover>
                                                <PopoverTrigger asChild>
                                                    <button className="btn btn-primary">
                                                        <img
                                                            src="/placeholder.svg"
                                                            width={48}
                                                            height={48}
                                                            alt={`主卡 ${i + 1}`}
                                                            className="w-full h-full object-contain"
                                                        />
                                                    </button>
                                                </PopoverTrigger>
                                                <div className="w-full h-full object-contain justify-center">
                                                    <PopoverContent
                                                        className="w-full max-w-4xl object-contain justify-center">
                                                        <Zk/>
                                                    </PopoverContent>
                                                </div>
                                            </Popover>
                                        )}
                                    </div>
                                ))}
                            </div>
                            <div className="grid grid-cols-[repeat(12,0.3fr)] gap-2">
                                {Array.from({length: 12}).map((_, i) => (
                                    <div key={i} className="bg-muted rounded-md p-2 flex items-center justify-center">
                                        {userSelections.fnSelection[i] ? (<img
                                            src={userSelections.fnSelection[i].pre}
                                            width={200}
                                            height={200}
                                            alt={userSelections.fnSelection[i].name}
                                            title={userSelections.fnSelection[i].name}
                                            className="w-full h-full object-contain"
                                            onClick={() => handleClickPrevCard('fnSelection', userSelections.fnSelection[i])}
                                        />) : (
                                            <Popover>
                                                <PopoverTrigger asChild>
                                                    <button className="btn btn-primary">
                                                        <img
                                                            src="/placeholder.svg"
                                                            width={48}
                                                            height={48}
                                                            alt={`赋能 ${i + 1}`}
                                                            className="w-full h-full object-contain"
                                                        />
                                                    </button>
                                                </PopoverTrigger>
                                                <div className="w-full h-full object-contain justify-center">
                                                    <PopoverContent
                                                        className="w-full max-w-4xl object-contain justify-center">
                                                        <Fn/>
                                                    </PopoverContent>
                                                </div>
                                            </Popover>
                                        )}
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>
                    <div className="grid grid-cols-[repeat(1,1fr)] gap-4">
                        <div className="bg-card p-4 rounded-lg shadow-md">
                            <div className="flex items-center justify-between mb-2">
                                <span
                                    className="text-sm font-medium">羁绊:&nbsp;&nbsp;{userSelections.jbSelection.map((item: any) => item.name).join("-")}</span>
                                <PlusIcon className="w-5 h-5 text-muted-foreground"/>
                            </div>
                            <div className="grid grid-cols-[repeat(6,0.3fr)] gap-2">
                                {Array.from({length: 6}).map((_, i) => (
                                    <div key={i} className="bg-muted rounded-md p-2 flex items-center justify-center">
                                        {userSelections.jbSelection[i] ? (<img
                                            src={userSelections.jbSelection[i].pre}
                                            width={600}
                                            height={400}
                                            alt={userSelections.jbSelection[i].name}
                                            title={userSelections.jbSelection[i].name}
                                            className="w-full h-full object-contain"
                                            onClick={() => handleClickPrevCard('jbSelection', userSelections.jbSelection[i])}
                                        />) : (
                                            <Popover>
                                                <PopoverTrigger asChild>
                                                    <button className="btn btn-primary">
                                                        <img
                                                            src="/placeholder.svg"
                                                            width={28}
                                                            height={28}
                                                            alt={`羁绊 ${i + 1}`}
                                                            className="w-full h-full object-contain"
                                                        />
                                                    </button>
                                                </PopoverTrigger>
                                                <div className="w-full h-full object-contain justify-center">
                                                    <PopoverContent
                                                        className="w-full max-w-4xl object-contain justify-center">
                                                        <Jb/>
                                                    </PopoverContent>
                                                </div>
                                            </Popover>

                                        )}
                                    </div>
                                ))}
                            </div>
                        </div>

                    </div>
                    <div className="grid grid-cols-[0.2fr_0.8fr] gap-4">
                        <div className="bg-card p-2 rounded-lg shadow-md">
                            <div className="flex items-center justify-between mb-2">
                                <span
                                    className="text-sm font-medium">套装:&nbsp;&nbsp;{userSelections.tzSelection.map((item: any) => item.name).join("-")}</span>
                                <PlusIcon className="w-5 h-5 text-muted-foreground"/>
                            </div>
                            <div className="grid grid-cols-[repeat(2,1fr)] gap-2">
                                {Array.from({length: 11}).map((_, i) => (
                                    <div key={i} className="bg-muted rounded-md p-2 flex items-center justify-center">
                                        {userSelections.tzSelection[i] ? (<img
                                            src={userSelections.tzSelection[i].pic}
                                            width={600}
                                            height={400}
                                            alt={userSelections.tzSelection[i].name}
                                            title={userSelections.tzSelection[i].name}
                                            className="w-full h-full object-contain"
                                            onClick={() => handleClickPrevCard('tzSelection', userSelections.tzSelection[i])}
                                        />) : (
                                            <Popover>
                                                <PopoverTrigger asChild>
                                                    <button className="btn btn-primary">
                                                        <img
                                                            src="/placeholder.svg"
                                                            width={48}
                                                            height={48}
                                                            alt={`套装 ${i + 1}`}
                                                            className="w-full h-full object-contain"
                                                        />
                                                    </button>
                                                </PopoverTrigger>
                                                <div className="w-full h-full object-contain justify-center">
                                                    <PopoverContent
                                                        className="w-full max-w-4xl object-contain justify-center">
                                                        <Tz/>
                                                    </PopoverContent>
                                                </div>
                                            </Popover>
                                        )}
                                    </div>
                                ))}
                            </div>
                        </div>
                        <div className="bg-card p-4 rounded-lg shadow-md">
                            <div className="flex items-center justify-between mb-2">
                                <span
                                    className="text-sm font-medium">装备:&nbsp;&nbsp;{userSelections.zbSelection.map((item: any) => item.name).join("-")}</span>
                                <PlusIcon className="w-5 h-5 text-muted-foreground"/>
                            </div>
                            <div className="flex items-center justify-between mb-2">
                                <span
                                    className="text-sm font-medium">远古词条:&nbsp;&nbsp;{userSelections.ygSelection.map((item: any) => item.name).join("-")}</span>
                                <PlusIcon className="w-5 h-5 text-muted-foreground"/>
                            </div>
                            <div className="flex items-center justify-between mb-2">
                                <span
                                    className="text-sm font-medium">黄印词条:&nbsp;&nbsp;{userSelections.hySelection.map((item: any) => item.name).join("-")}</span>
                                <PlusIcon className="w-5 h-5 text-muted-foreground"/>
                            </div>
                            <div className="grid grid-cols-[repeat(5,1fr)] gap-2">
                                {Array.from({length: 10}).map((_, i) => (
                                    <div key={i} className="bg-muted rounded-md p-2 flex items-center justify-center">
                                        {userSelections.zbSelection[i] ? (<img
                                            src={userSelections.zbSelection[i].pic}
                                            width={600}
                                            height={400}
                                            alt={userSelections.zbSelection[i].name}
                                            title={userSelections.zbSelection[i].name}
                                            className="w-full h-full object-contain"
                                            onClick={() => handleClickPrevCard('zbSelection', userSelections.zbSelection[i])}
                                        />) : (
                                            <Popover>
                                                <PopoverTrigger asChild>
                                                    <button className="btn btn-primary">
                                                        <img
                                                            src="/placeholder.svg"
                                                            width={48}
                                                            height={48}
                                                            alt={`装备 ${i + 1}`}
                                                            className="w-full h-full object-contain"
                                                        />
                                                    </button>
                                                </PopoverTrigger>
                                                <div className="w-full h-full object-contain justify-center">
                                                    <PopoverContent
                                                        className="w-full max-w-4xl object-contain justify-center">
                                                        <Zb/>
                                                    </PopoverContent>
                                                </div>
                                            </Popover>

                                        )}
                                    </div>
                                ))}
                            </div>
                            <div className="grid grid-cols-[repeat(10,1fr)] gap-2">
                                {Array.from({length: 10}).map((_, i) => (
                                    <div key={i} className="bg-muted rounded-md p-2 flex items-center justify-center">
                                        {userSelections.ygSelection[i] ? (<img
                                            src={userSelections.ygSelection[i].pic}
                                            width={600}
                                            height={400}
                                            alt={userSelections.ygSelection[i].name}
                                            title={userSelections.ygSelection[i].name}
                                            className="w-full h-full object-contain"
                                            onClick={() => handleClickPrevCard('ygSelection', userSelections.ygSelection[i])}
                                        />) : (
                                            <Popover>
                                                <PopoverTrigger asChild>
                                                    <button className="btn btn-primary">
                                                        <img
                                                            src="/placeholder.svg"
                                                            width={48}
                                                            height={48}
                                                            alt={`远古词条 ${i + 1}`}
                                                            className="w-full h-full object-contain"
                                                        />
                                                    </button>
                                                </PopoverTrigger>
                                                <div className="w-full h-full object-contain justify-center">
                                                    <PopoverContent
                                                        className="w-full max-w-4xl object-contain justify-center">
                                                        <Yg/>
                                                    </PopoverContent>
                                                </div>
                                            </Popover>
                                        )}
                                    </div>
                                ))}
                            </div>
                            <div className="grid grid-cols-[repeat(10,1fr)] gap-2">
                                {Array.from({length: 4}).map((_, i) => (
                                    <div key={i} className="bg-muted rounded-md p-2 flex items-center justify-center">
                                        {userSelections.hySelection[i] ? (<img
                                            src={userSelections.hySelection[i].pic}
                                            width={100}
                                            height={100}
                                            alt={userSelections.hySelection[i].name}
                                            title={userSelections.hySelection[i].name}
                                            className="w-full h-full object-contain"
                                            onClick={() => handleClickPrevCard('hySelection', userSelections.hySelection[i])}
                                        />) : (
                                            <Popover>
                                                <PopoverTrigger asChild>
                                                    <button className="btn btn-primary">
                                                        <img
                                                            src="/placeholder.svg"
                                                            width={12}
                                                            height={12}
                                                            alt={`黄印词条 ${i + 1}`}
                                                            className="w-full h-full object-contain"
                                                        />
                                                    </button>
                                                </PopoverTrigger>
                                                <div className="w-full h-full object-contain justify-center">
                                                    <PopoverContent
                                                        className="w-full max-w-4xl object-contain justify-center">
                                                        <Hy/>
                                                    </PopoverContent>
                                                </div>
                                            </Popover>
                                        )}
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>
                    <div className="bg-card p-4 rounded-lg shadow-md">
                        <div className="grid grid-rows-[auto_1fr] gap-4">
                            <div className="flex items-center justify-between mb-2">
                                <span
                                    className="text-sm font-medium">符文之语及符文:&nbsp;&nbsp;{userSelections.fwzySelection.map((item: any) => item.name).join("-")}</span>
                                <PlusIcon className="w-5 h-5 text-muted-foreground"/>
                            </div>
                            <div className="grid grid-cols-[repeat(5,0.6fr)] gap-0.5">
                                {Array.from({length: 10}).map((_, i) => (
                                    <div key={i} className="bg-muted rounded-md p-2 flex items-center justify-center">
                                        {userSelections.fwzySelection[i] ?
                                            (<span className="text-sm font-medium"
                                                   title={userSelections.fwzySelection[i].name}
                                                   onClick={() => handleClickPrevCard('fwzySelection', userSelections.fwzySelection[i])}
                                            >
                                                {userSelections.fwzySelection[i].name}
                                            </span>) :
                                            (
                                                <Popover>
                                                    <PopoverTrigger asChild>
                                                        <button className="btn btn-primary text-align-center">
                                                        <span className="text-sm align-center font-medium">
                                                            空
                                                        </span>
                                                        </button>
                                                    </PopoverTrigger>
                                                    <div className="w-full h-full object-contain justify-center">
                                                        <PopoverContent
                                                            className="w-full max-w-4xl object-contain justify-center">
                                                            <Fwzy/>
                                                        </PopoverContent>
                                                    </div>
                                                </Popover>

                                            )
                                        }
                                    </div>
                                ))}
                            </div>
                        </div>
                        <div className="grid grid-cols-[repeat(7,1fr)] gap-2 mt-4">
                            {Array.from({length: 14}).map((_, i) => (
                                <div key={i} className="bg-muted rounded-md p-2 flex items-center justify-center">
                                    {userSelections.fwSelection[i] ? (<img
                                        src={userSelections.fwSelection[i].pic}
                                        width={600}
                                        height={400}
                                        alt={userSelections.fwSelection[i].name}
                                        title={userSelections.fwSelection[i].name}
                                        className="w-full h-full object-contain"
                                        onClick={() => handleClickPrevCard('fwSelection', userSelections.fwSelection[i])}
                                    />) : (
                                        <Popover>
                                            <PopoverTrigger asChild>
                                                <img
                                                    src="/placeholder.svg"
                                                    width={48}
                                                    height={48}
                                                    alt={`符文 ${i + 1}`}
                                                    className="w-full h-full object-contain"
                                                />
                                            </PopoverTrigger>
                                            <div className="w-full h-full object-contain justify-center">
                                                <PopoverContent
                                                    className="w-full max-w-4xl object-contain justify-center">
                                                    <Fw/>
                                                </PopoverContent>
                                            </div>
                                        </Popover>

                                    )}
                                </div>
                            ))}
                        </div>
                    </div>
                    {/* 添加一行技能卡片（图片上分别显示技能等级 倍率） 并在下方显示预计该技能实际造成的伤害 */}
                <div className="bg-card p-4 rounded-lg shadow-md mt-4">
                    <div className="flex gap-4">
                        {/* 职业选择选项卡 */}
                        <div className="flex flex-col gap-1 select-none">
                            {['斩魂', '影舞', '魔王', '战将', '亡语', '圣者'].map((profession) => (
                                <div
                                    key={profession}
                                    onClick={() => setSelectedProfession(profession)}
                                    className={`cursor-pointer px-3 py-2 rounded text-center text-xs transition-all duration-150 border border-transparent ${selectedProfession === profession ? 'font-bold' : ''} hover:border-primary`}
                                    style={{ minWidth: 60 }}
                                >
                                    {profession}
                                </div>
                            ))}
                        </div>
                        
                        {/* 技能卡片区域 */}
                        <div className="flex-1">
                            <div className="grid grid-cols-[repeat(5,1fr)] gap-2 mb-4">
                                {Array.from({length: 10}).map((_, i) => (
                                    <div key={i} className="bg-muted rounded-md p-2 flex flex-col items-center justify-center">
                                        {userSelections.jnSelection?.[i] ? (
                                            <>
                                                <div className="relative w-full">
                                                    <img
                                                        src={userSelections.jnSelection[i].pic}
                                                        width={200}
                                                        height={150}
                                                        alt={userSelections.jnSelection[i].name}
                                                        title={userSelections.jnSelection[i].name}
                                                        className="w-full h-full object-contain"
                                                        onClick={() => handleClickPrevCard('jnSelection', userSelections.jnSelection[i])}
                                                    />
                                                    {/* 技能等级和倍率显示 */}
                                                    <div className="absolute top-1 left-1 bg-black bg-opacity-70 text-white text-xs px-1 rounded">
                                                        Lv.{userSelections.jnSelection[i].level || 1}
                                                    </div>
                                                    <div className="absolute top-1 right-1 bg-red-600 bg-opacity-70 text-white text-xs px-1 rounded">
                                                        {userSelections.jnSelection[i].multiplier || 1.0}x
                                                    </div>
                                                </div>
                                                {/* 技能伤害显示 */}
                                                <div className="mt-2 text-center w-full">
                                                    <div className="text-sm font-medium text-gray-600">
                                                        {userSelections.jnSelection[i].name}
                                                    </div>
                                                    <div className="text-lg font-bold text-red-600">
                                                        {calculateJnDamage(userSelections.jnSelection[i]).toLocaleString()}
                                                    </div>
                                                    <div className="text-xs text-gray-500">
                                                        预计伤害
                                                    </div>
                                                </div>
                                            </>
                                        ) : (
                                            <Popover>
                                                <PopoverTrigger asChild>
                                                    <div className="relative w-full">
                                                        <img
                                                            src="/placeholder.svg"
                                                            width={200}
                                                            height={150}
                                                            alt={`技能 ${i + 1}`}
                                                            className="w-full h-full object-contain"
                                                        />
                                                        <div className="absolute top-1 left-1 bg-black bg-opacity-70 text-white text-xs px-1 rounded">
                                                            选择技能
                                                        </div>
                                                    </div>
                                                </PopoverTrigger>
                                                <div className="w-full h-full object-contain justify-center">
                                                    <PopoverContent className="w-full max-w-4xl object-contain justify-center">
                                                        <Jn profession={selectedProfession} />
                                                    </PopoverContent>
                                                </div>
                                            </Popover>
                                        )}
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>
                </div>
                </div>
                <div className="bg-card p-4 rounded-lg shadow-md">
                    <span className="text-lg font-medium">分值决定发挥基础攻击效率</span>
                    <div className="flex items-center justify-between mb-4">
                        {isLocked ? (
                            <span className="text-lg font-large double-underline" style={{color: "#b73030"}}>
                            {roleValues.totalScore?.toFixed(2)}
                        </span>
                        ) : (
                            <span className="text-lg font-large double-underline" style={{color: "#5de011"}}>
                            {roleValues.totalScore?.toFixed(2)}
                        </span>
                        )}

                        {/* Optionally display the score change ratio when unlocked */}
                        <span className="flex items-center text-lg font-small arrow-positioning">
                            {scoreChangeRatio !== null && (
                                <>
                                    {scoreChangeRatio > 0 ? (
                                        <>
                                            <ArrowUpIcon className="w-6 h-6 mr-0.1" style={{color: "#FF0000"}}/>
                                            <span className="value up text-red-500"
                                                  style={{color: "#FF0000"}}>{scoreChangeRatio.toFixed(0)}%</span>
                                        </>
                                    ) : (
                                        <>
                                            <ArrowDownIcon className="w-6 h-6 mr-0.1" style={{color: "#008000"}}/>
                                            <span className="value up text-green-500"
                                                  style={{color: "#008000"}}>{-scoreChangeRatio.toFixed(0)}%</span>
                                        </>
                                    )}
                                </>
                            )}
                        </span>

                        <Button variant="outline" size="icon" onClick={toggleLock}>
                            {isLocked ? (
                                <>
                                    <LockIcon className="w-5 h-5"/>
                                    <span className="sr-only">解锁</span>
                                </>
                            ) : (
                                <>
                                    <UnlockIcon className="w-5 h-5"/>
                                    <span className="sr-only">锁定</span>
                                </>
                            )}
                        </Button>
                        <Button variant="outline" size="icon" onClick={handleExportToImage}>
                            <DownloadIcon className="w-5 h-5"/>
                            <span className="sr-only">导出</span>
                        </Button>
                        {/*<ShareButton calRef={calRef}/>*/}
                        <Button variant="outline" size="icon" onClick={handleSave}>
                            <SaveIcon className="w-5 h-5"/>
                            <span className="sr-only">保存</span>
                        </Button>
                    </div>

                    <div className="grid gap-4">
                        <div className="grid grid-cols-[auto_1fr] items-center gap-2">
                            <Popover>
                                <PopoverTrigger asChild>
                                    <button className="btn btn-primary">
                                        <SwordIcon className="w-6 h-6 text-primary"/>
                                    </button>
                                </PopoverTrigger>
                                <div>
                                    <div className="text-sm font-medium">攻击</div>
                                    <div className="text-2xl font-bold">{roleValues.gj}%</div>
                                    <PopoverContent>
                                        <div className="grid grid-cols-[repeat(1,1fr)] gap-0">
                                            {/* Use flex column to automatically*/
                                                sources && Object.entries(sources).map(([type, properties]) => (
                                                    (properties && typeof properties === 'object' && ('gj' in properties)) && ((properties as { gj: number }).gj !== 0) && (
                                                        <p key={type} className="text-sm">
                                                            <br/>{type}: {(properties as { gj: number }).gj}%
                                                        </p>
                                                    )
                                                ))
                                            }
                                        </div>
                                    </PopoverContent>
                                </div>
                            </Popover>
                        </div>
                        <div className="grid grid-cols-[auto_1fr] items-center gap-2">
                            <Popover>
                                <PopoverTrigger asChild>
                                    <button className="btn btn-primary">
                                        <ShieldIcon className="w-6 h-6 text-primary"/>
                                    </button>
                                </PopoverTrigger>
                                <div>
                                    <div className="text-sm font-medium">主属伤</div>
                                    {/*<div*/}
                                    {/*    className="text-2xl font-bold">{Math.max(roleValues.bs??0, roleValues.hs??0, roleValues.ls??0, roleValues.ds??0) + roleValues.qsxsh}%*/}
                                    {/*</div>*/}
                                    <RoleColorDisplay items={roleValues}/>
                                    <PopoverContent>
                                        <div className="grid grid-cols-[repeat(1,1fr)] gap-0">
                                            {/* Use flex column to automatically*/
                                                <p key={'装备'} className="text-sm">
                                                    <br/>装备: 30%
                                                </p>
                                            }
                                        </div>
                                        <div className="grid grid-cols-[repeat(1,1fr)] gap-0">
                                            {/* Use flex column to automatically*/
                                                sources && Object.entries(sources).map(([type, properties]) => (
                                                    (properties && typeof properties === 'object' && type === '主卡' && (
                                                            (properties as { bs: number }).bs !== 0 ||
                                                            (properties as { hs: number }).hs !== 0 ||
                                                            (properties as { ls: number }).ls !== 0 ||
                                                            (properties as { ds: number }).ds !== 0
                                                        ) && (
                                                            <p key={type} className="text-sm">
                                                                <br/>{type}: {Math.max(((properties as { bs: number }).bs ?? 0), ((properties as { hs: number }).hs ?? 0), ((properties as { ls: number }).ls ?? 0), ((properties as { ds: number }).ds ?? 0)).toFixed(0)}%
                                                            </p>
                                                        )
                                                    ))
                                                )
                                            }
                                        </div>
                                        <div className="grid grid-cols-[repeat(1,1fr)] gap-0">
                                            {/* Use flex column to automatically*/
                                                sources && Object.entries(sources).map(([type, properties]) => (
                                                    (properties && typeof properties === 'object' && type === '万物之母' && (
                                                            (properties as { bs: number }).bs !== 0 ||
                                                            (properties as { hs: number }).hs !== 0 ||
                                                            (properties as { ls: number }).ls !== 0 ||
                                                            (properties as { ds: number }).ds !== 0
                                                        ) && (
                                                            <p key={type} className="text-sm">
                                                                <br/>{type}: {(((properties as { bs: number }).bs ?? 0) + ((properties as { hs: number }).hs ?? 0) + ((properties as { ls: number }).ls ?? 0) + ((properties as { ds: number }).ds ?? 0)).toFixed(0)}%
                                                            </p>
                                                        )
                                                    ))
                                                )
                                            }
                                        </div>
                                        <div className="grid grid-cols-[repeat(1,1fr)] gap-0">
                                            {/* Use flex column to automatically*/
                                                sources && Object.entries(sources).map(([type, properties]) => (
                                                    (properties && typeof properties === 'object' && ('qsxsh' in properties)) && ((properties as { qsxsh: number }).qsxsh !== 0) && (
                                                        <p key={type} className="text-sm">
                                                            <br/>{type}: {(properties as { qsxsh: number }).qsxsh}%
                                                        </p>
                                                    )
                                                ))
                                            }
                                        </div>

                                    </PopoverContent>
                                </div>
                            </Popover>
                        </div>
                        <div className="grid grid-cols-[auto_1fr] items-center gap-2">
                            <Popover>
                                <PopoverTrigger asChild>
                                    <button className="btn btn-primary">
                                        <CloudLightningIcon className="w-6 h-6 text-primary"/>
                                    </button>
                                </PopoverTrigger>
                                <div>
                                    <div className="text-sm font-medium">暴击率</div>
                                    <div className="text-2xl font-bold">{roleValues.bjl}%</div>
                                    <PopoverContent>
                                        <div className="grid grid-cols-[repeat(1,1fr)] gap-0">
                                            {/* Use flex column to automatically*/
                                                sources && Object.entries(sources).map(([type, properties]) => (
                                                    (properties && typeof properties === 'object' && ('bjl' in properties)) && ((properties as { bjl: number }).bjl !== 0) && (
                                                        <p key={type} className="text-sm">
                                                            <br/>{type}: {(properties as { bjl: number }).bjl}%
                                                        </p>
                                                    )
                                                ))
                                            }
                                        </div>
                                    </PopoverContent>
                                </div>
                            </Popover>
                        </div>
                        <div className="grid grid-cols-[auto_1fr] items-center gap-2">
                            <Popover>
                                <PopoverTrigger asChild>
                                    <button className="btn btn-primary">
                                        <StarIcon className="w-6 h-6 text-primary"/>
                                    </button>
                                </PopoverTrigger>
                                <div>
                                    <div className="text-sm font-medium">暴击伤害</div>
                                    <div className="text-2xl font-bold">{roleValues.bjsh}%</div>
                                </div>
                                <PopoverContent>
                                    <div className="grid grid-cols-[repeat(1,1fr)] gap-0">
                                        {/* Use flex column to automatically*/
                                            sources && Object.entries(sources).map(([type, properties]) => (
                                                (properties && typeof properties === 'object' && ('bjsh' in properties)) && ((properties as { bjsh: number }).bjsh !== 0) && (
                                                    <p key={type} className="text-sm">
                                                        <br/>{type}: {(properties as { bjsh: number }).bjsh}%
                                                    </p>
                                                )
                                            ))
                                        }
                                    </div>
                                </PopoverContent>
                            </Popover>
                        </div>
                        <div className="grid grid-cols-[auto_1fr] items-center gap-2">
                            <Popover>
                                <PopoverTrigger asChild>
                                    <button className="btn btn-primary">
                                        <HeartIcon className="w-6 h-6 text-primary"/>
                                    </button>
                                </PopoverTrigger>
                                <div>
                                    <div className="text-sm font-medium">异常增伤</div>
                                    <div className="text-2xl font-bold">{roleValues.yczs}%</div>
                                </div>
                                <PopoverContent>
                                    <div className="grid grid-cols-[repeat(1,1fr)] gap-0">
                                        {/* Use flex column to automatically*/
                                            sources && Object.entries(sources).map(([type, properties]) => (
                                                (properties && typeof properties === 'object' && ('yczs' in properties)) && ((properties as { yczs: number }).yczs !== 0) && (
                                                    <p key={type} className="text-sm">
                                                        <br/>{type}: {(properties as { yczs: number }).yczs}%
                                                    </p>
                                                )
                                            ))
                                        }
                                    </div>
                                </PopoverContent>
                            </Popover>
                        </div>
                        <div className="grid grid-cols-[auto_1fr] items-center gap-2">
                            <Popover>
                                <PopoverTrigger asChild>
                                    <button className="btn btn-primary">
                                        <BoltIcon className="w-6 h-6 text-primary"/>
                                    </button>
                                </PopoverTrigger>
                                <div>
                                    <div className="text-sm font-medium">对Boss增伤</div>
                                    <div className="text-2xl font-bold">{roleValues.dbzs}%</div>
                                </div>
                                <PopoverContent>
                                    <div className="grid grid-cols-[repeat(1,1fr)] gap-0">
                                        {/* Use flex column to automatically*/
                                            sources && Object.entries(sources).map(([type, properties]) => (
                                                (properties && typeof properties === 'object' && ('dbzs' in properties)) && ((properties as { dbzs: number }).dbzs !== 0) && (
                                                    <p key={type} className="text-sm">
                                                        <br/>{type}: {(properties as { dbzs: number }).dbzs}%
                                                    </p>
                                                )
                                            ))
                                        }
                                    </div>
                                </PopoverContent>
                            </Popover>
                        </div>
                        <div className="grid grid-cols-[auto_1fr] items-center gap-2">
                            <Popover>
                                <PopoverTrigger asChild>
                                    <button className="btn btn-primary">
                                        <BombIcon className="w-6 h-6 text-primary"/>
                                    </button>
                                </PopoverTrigger>
                                <div>
                                    <div className="text-sm font-medium">最终伤害</div>
                                    <div className="text-2xl font-bold">{roleValues.zzsh}%</div>
                                </div>
                                <PopoverContent>
                                    <div className="grid grid-cols-[repeat(1,1fr)] gap-0">
                                        {/* Use flex column to automatically*/
                                            sources && Object.entries(sources).map(([type, properties]) => (
                                                (properties && typeof properties === 'object' && ('zzsh' in properties)) && ((properties as { zzsh: number }).zzsh !== 0) && (
                                                    <p key={type} className="text-sm">
                                                        <br/>{type}: {(properties as { zzsh: number }).zzsh}%
                                                    </p>
                                                )
                                            ))
                                        }
                                    </div>
                                </PopoverContent>
                            </Popover>
                        </div>
                        <div className="grid grid-cols-[auto_1fr] items-center gap-2">
                            <Popover>
                                <PopoverTrigger asChild>
                                    <button className="btn btn-primary">
                                        <BombIcon className="w-6 h-6 text-primary"/>
                                    </button>
                                </PopoverTrigger>
                                <div>
                                    <div className="text-sm font-medium">对指定属性Boss增伤</div>
                                    <div className="text-2xl font-bold">{roleValues.dzdbzs}%</div>
                                </div>
                                <PopoverContent>
                                    <div className="grid grid-cols-[repeat(1,1fr)] gap-0">
                                        {/* Use flex column to automatically*/
                                            sources && Object.entries(sources).map(([type, properties]) => (
                                                (properties && typeof properties === 'object' && ('dzdbzs' in properties)) && ((properties as { dzdbzs: number }).dzdbzs !== 0) && (
                                                    <p key={type} className="text-sm">
                                                        <br/>{type}: {(properties as { dzdbzs: number }).dzdbzs}%
                                                    </p>
                                                )
                                            ))
                                        }
                                    </div>
                                </PopoverContent>
                            </Popover>
                        </div>
                        <div className="grid grid-cols-[auto_1fr] items-center gap-2">
                            <Popover>
                                <PopoverTrigger asChild>
                                    <button className="btn btn-primary">
                                        <BombIcon className="w-6 h-6 text-primary"/>
                                    </button>
                                </PopoverTrigger>
                                <div>
                                    <div className="text-sm font-medium">技能增伤</div>
                                    <div className="text-2xl font-bold">{roleValues.jn}%</div>
                                </div>
                                <PopoverContent>
                                    <div className="grid grid-cols-[repeat(1,1fr)] gap-0">
                                        {/* Use flex column to automatically*/
                                            sources && Object.entries(sources).map(([type, properties]) => (
                                                (properties && typeof properties === 'object' && ('jn' in properties)) && ((properties as { jn: number }).jn !== 0) && (
                                                    <p key={type} className="text-sm">
                                                        <br/>{type}: {(properties as { jn: number }).jn}%
                                                    </p>
                                                )
                                            ))
                                        }
                                    </div>
                                </PopoverContent>
                            </Popover>
                        </div>
                        <div className="grid grid-cols-[auto_1fr] items-center gap-2">
                            <Popover>
                                <PopoverTrigger asChild>
                                    <button className="btn btn-primary">
                                        <BombIcon className="w-6 h-6 text-primary"/>
                                    </button>
                                </PopoverTrigger>
                                <div>
                                    <div className="text-sm font-medium">穿透</div>
                                    <div className="text-2xl font-bold">{roleValues.ct}%</div>
                                </div>
                                <PopoverContent>
                                    <div className="grid grid-cols-[repeat(1,1fr)] gap-0">
                                        {/* Use flex column to automatically*/
                                            sources && Object.entries(sources).map(([type, properties]) => (
                                                (properties && typeof properties === 'object' && ('ct' in properties)) && ((properties as { ct: number }).ct !== 0) && (
                                                    <p key={type} className="text-sm">
                                                        <br/>{type}: {(properties as { ct: number }).ct}%
                                                    </p>
                                                )
                                            ))
                                        }
                                    </div>
                                </PopoverContent>
                            </Popover>
                        </div>
                        <div className="grid grid-cols-[auto_1fr] items-center gap-2">
                            <Popover>
                                <PopoverTrigger asChild>
                                    <button className="btn btn-primary">
                                        <BombIcon className="w-6 h-6 text-primary"/>
                                    </button>
                                </PopoverTrigger>
                                <div>
                                    <div className="text-sm font-medium">减抗</div>
                                    <div className="text-2xl font-bold">{roleValues.jk}%</div>
                                </div>
                                <PopoverContent>
                                    <div className="grid grid-cols-[repeat(1,1fr)] gap-0">
                                        {/* Use flex column to automatically*/
                                            sources && Object.entries(sources).map(([type, properties]) => (
                                                (properties && typeof properties === 'object' && ('jk' in properties)) && ((properties as { jk: number }).jk !== 0) && (
                                                    <p key={type} className="text-sm">
                                                        <br/>{type}: {(properties as { jk: number }).jk}%
                                                    </p>
                                                )
                                            ))
                                        }
                                    </div>
                                </PopoverContent>
                            </Popover>
                        </div>
                        <div className="grid grid-cols-[auto_1fr] items-center gap-2">
                            <div style={{marginTop: '1rem'}}>
                                <div
                                    className="text-lg font-semibold">恭喜你，你的搭配初始破招伤害为{(9 * (roleValues?.totalScore ?? 0.86) * 1.5 * (1 + 0.175 * 2 + ((userSelections.fwzySelection.some((item) => item.name === '无尽黑焰')) ? 0.83 : 0)) / (1 + (roleValues?.yczs ?? 0) / 100) * 0.5).toFixed(2)} 万！远征伤害为
                                    <span
                                        style={{color: 'red'}}>{(5 * (roleValues?.totalScore ?? 0.86) * 333 * 6 / 10000 * (1 - (0.4 * ((userSelections.jbSelection.some((item) => item.name === '宿命歧路')) ? (1-0.5) : 1))) * (1 + ((userSelections.jbSelection.some((item) => item.name === '混乱行者')) ? 0.18 : 0)) * ((userSelections.zkSelection.some((item) => item.name === '躯壳')) ? 1 : 0.9) * ((userSelections.zkSelection.some((item) => item.name === '海妖')) ? 1 : 0.88)).toFixed(2)} 亿！</span>
                                </div>
                                <div
                                    className="text-sm text-gray-500 mt-2">基于基础攻击9w估算（基础攻击可通过上下塔寻2增加的攻击*10计算）
                                </div>
                            </div>
                        </div>
                    </div>
                    <div className="grid grid-cols-[1fr_1fr] gap-4 flex items-end flex-grow">
                        <div className="grid flex-col justify-end items-center gap-2">
                            {/* 假设groupQrCodeUrl是群聊二维码的URL */}
                            <Card>
                                <CardContent className="p-4 bg-background">
                                    <h3 className="text-sm font-bold">{'我也要来'}</h3>
                                </CardContent>
                                <div className="relative flex items-end">
                                    <QRCode
                                        value={'https://god2.note-chat.cn'}
                                        size={100}
                                        level={'H'}
                                        includeMargin={true}
                                    />
                                </div>
                            </Card>
                        </div>

                        <div className="grid items-center gap-2">
                            {/* 假设groupQrCodeUrl是群聊二维码的URL */}
                            <Card>
                                <CardContent className="p-4 bg-background">
                                    <h3 className="text-sm font-bold">{'扫码加入'}</h3>
                                </CardContent>
                                <div className="relative flex items-end">
                                    <img
                                        src={'/assets/qrcode/wx-qrcode-921.jpg'}
                                        alt={'微信群入口'}
                                        width={40}
                                        height={40}
                                        className="object-cover w-full h-full"
                                    />
                                </div>

                            </Card>
                        </div>
                    </div>
                    {/*    //https://god2.note-chat.cn/ */}

                </div>
            </div>
        </div>
    )
}

async function dataURLToBlob(calRef: any, dataURL: string): Promise<Blob> {
    // ... 这里可以复用之前提到的数据URL转Blob的辅助函数
    const canvas = await html2canvas(calRef.current);
    const imgDataUrl = canvas.toDataURL('image/png');

    // 将DataURL转换为Blob
    const byteString = atob(imgDataUrl.split(',')[1]);
    const arrayBuffer = new ArrayBuffer(byteString.length);
    const int8Array = new Uint8Array(arrayBuffer);
    for (let i = 0; i < byteString.length; i++) {
        int8Array[i] = byteString.charCodeAt(i);
    }
    return new Blob([int8Array], {type: 'image/png'});
}

function ShareButton(props: any) {
    const {userSelections, selectItem} = useContext(UserSelectionsContext);
    const {roleValues} = useContext(RoleContext);

    const [shareLinksCache, setShareLinksCache] = useState<{ [key: string]: string }>({});
    const [shareLink, setShareLink] = useState<string | null>(null);
    const closeModal = () => setShareLink(null);

    const nameRelections = {
        "zkSelection": "主卡",
        "zbSelection": "装备",
        "jbSelection": "羁绊",
        "fwSelection": "符文",
        "fwzySelection": "符文之语",
        "tzSelection": "套装",
        "jnSelection": "技能",
        "hySelection": "黄印",
        "fnSelection": "赋能",
        "ygSelection": "远古词条",
    };
    const sxRelections = {
        "zkSelection": "sx",
        "zbSelection": "sx",
        "jbSelection": "forth",
        "fwSelection": "sx",
        "fwzySelection": "sx",
        "tzSelection": "sx",
        "jnSelection": "sx",
        "hySelection": "sx",
        "fnSelection": "sx",
        "ygSelection": "sx"
    };

    const handleExportAndShare = async () => {
        try {
            // 假设calRef.current已经被正确设置且用于获取html2canvas的图片数据
            if (props.calRef.current) {
                const canvas = await html2canvas(props.calRef.current);
                const imgDataUrl = canvas.toDataURL('image/png');
                // 使用userSelections创建一个唯一的文件名
                const fileName = generateFilename(userSelections, nameRelections, roleValues.totalScore);
                // 检查链接是否已存在于缓存中
                if (shareLinksCache[fileName]) {
                    setShareLink(shareLinksCache[fileName]);
                    return;
                }
                dataURLToBlob(props.calRef, imgDataUrl).then(async blob => {
                    const formData = new FormData();
                    formData.append('image', blob, fileName);
                    // 调用uploadImage函数上传图片并获取分享链接
                    const links = await uploadImage(formData);
                    setShareLinksCache(prevState => ({...prevState, [fileName]: links}));
                    if (links) {
                        setShareLink(links); // 保存分享链接
                    } else {
                        alert('分享链接获取失败');
                    }
                });
            }
        } catch (error) {
            console.error('分享过程中出错:', error);
            alert('分享失败，请重试');
        }
    };
    return (
        <>
            <Button variant="outline" size="icon" onClick={handleExportAndShare}>
                <ShareIcon className="w-5 h-5"/>
                <span className="sr-only">分享</span>
            </Button>
            {shareLink && (
                <div className="modal">
                    <div className="modal-content">
                        <p>您的分享链接是:</p>
                        <a href={shareLink} target="_blank" rel="noopener noreferrer">{shareLink}</a>
                        <button onClick={closeModal}>关闭</button>
                    </div>
                </div>
            )}
        </>
    );
}

function BoltIcon(props: any) {
    return (
        <svg
            {...props}
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
        >
            <path
                d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/>
            <circle cx="12" cy="12" r="4"/>
        </svg>
    )
}


// Assuming roleValues is an object that gets updated and you want to re-render based on its changes.
function RoleColorDisplay(props: any) {
    const {roleValues} = useContext(RoleContext);

    const textMapping = {
        bs: 'text-blue-500',
        hs: 'text-red-500',
        ls: 'text-yellow-500',
        ds: 'text-green-500',
    };
    const colorMapping = {
        bs: {color: "#07f5d6"},
        hs: {color: "#ec1b1b"},
        ls: {color: "#facf06"},
        ds: {color: "#008000"},
    };
    let maxRole = 'bs';
    let maxValue = -Infinity;

    for (const key in roleValues) {
        if (['bs', 'hs', 'ls', 'ds'].includes(key) && typeof roleValues[key as keyof RoleType] === 'number' &&
            (roleValues[key as keyof RoleType] ?? maxValue) > maxValue) {
            maxRole = key;
            maxValue = roleValues[key as keyof RoleType] ?? maxValue;
        }
    }

    return (
        <div
            {...props}
        >
            <span className={"text-2xl font-bold ${textMapping[maxRole]}"}
                  style={colorMapping[maxRole as keyof typeof colorMapping]}>{(maxValue + (roleValues.qsxsh || 0)).toFixed(0)}%</span>
        </div>
    );
}

function BombIcon(props: any) {
    return (
        <svg
            {...props}
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
        >
            <circle cx="11" cy="13" r="9"/>
            <path d="M14.35 4.65 16.3 2.7a2.41 2.41 0 0 1 3.4 0l1.6 1.6a2.4 2.4 0 0 1 0 3.4l-1.95 1.95"/>
            <path d="m22 2-1.5 1.5"/>
        </svg>
    )
}


function CloudLightningIcon(props: any) {
    return (
        <svg
            {...props}
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
        >
            <path d="M6 16.326A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 .5 8.973"/>
            <path d="m13 12-3 5h4l-3 5"/>
        </svg>
    )
}


function CopyIcon(props: any) {
    return (
        <svg
            {...props}
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
        >
            <rect width="14" height="14" x="8" y="8" rx="2" ry="2"/>
            <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/>
        </svg>
    )
}


function FilterIcon(props: any) {
    return (
        <svg
            {...props}
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
        >
            <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"/>
        </svg>
    )
}


function FlameIcon(props: any) {
    return (
        <svg
            {...props}
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
        >
            <path
                d="M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z"/>
        </svg>
    )
}


function HeartIcon(props: any) {
    return (
        <svg
            {...props}
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
        >
            <path
                d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"/>
        </svg>
    )
}


function PlusIcon(props: any) {
    return (
        <svg
            {...props}
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
        >
            <path d="M5 12h14"/>
            <path d="M12 5v14"/>
        </svg>
    )
}


function ShieldIcon(props: any) {
    return (
        <svg
            {...props}
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
        >
            <path
                d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"/>
        </svg>
    )
}


function StarIcon(props: any) {
    return (
        <svg
            {...props}
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
        >
            <polygon
                points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"/>
        </svg>
    )
}


function SwordIcon(props: any) {
    return (
        <svg
            {...props}
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
        >
            <polyline points="14.5 17.5 3 6 3 3 6 3 17.5 14.5"/>
            <line x1="13" x2="19" y1="19" y2="13"/>
            <line x1="16" x2="20" y1="16" y2="20"/>
            <line x1="19" x2="21" y1="21" y2="19"/>
        </svg>
    )
}


function XIcon(props: any) {
    return (
        <svg
            {...props}
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
        >
            <path d="M18 6 6 18"/>
            <path d="m6 6 12 12"/>
        </svg>
    )
}
